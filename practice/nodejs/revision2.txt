Full Stack App: Integration & Deployment:
    1. Create MongoDB Cluster
        Go to https://cloud.mongodb.com and sign in.
        Create a new project and then a free shared cluster (M0).
    
    2. Create Database & User
        After cluster is ready:

        Click “Browse Collections” > Add Database (name like myAppDB)
        Go to Database Access > Add a user (username & password)
        Set Read and Write permissions.
    
    3. Set Network Access
        Go to Network Access > Add IP Address:

        Either choose 0.0.0.0/0 (access from anywhere) or Add Current IP
        
    4. Get Connection String
        Go to Clusters > Connect > Drivers > Node.js

        Copy the format like:

        mongodb+srv://<username>:<password>@cluster0.mongodb.net/<dbname>?retryWrites=true&w=majority
        
    5. Update .env
        Replace local MongoDB link with Atlas:

        MONGO_URI=mongodb+srv://myuser:pass123@cluster0.mongodb.net/myAppDB?retryWrites=true&w=majority
        6. Update Mongoose Connection Code
        const mongoose = require("mongoose");

        mongoose
        .connect(process.env.MONGO_URI)
        .then(() => console.log("MongoDB Connected"))
        .catch((err) => console.error(err));

    Ideal Deployment Flow for Fullstack Projects:

        1. Prepare Backend for Deployment
            Use Cloud Database URLs: Replace local MongoDB connection strings with your cloud database URI (e.g., MongoDB Atlas) in your backend’s .env file (MONGO_URI).

            Configure Environment Variables: Make sure all required environment variables are set correctly (PORT, JWT_SECRET, MONGO_URI, REDIS_URL if used, etc.)

            Test Locally: Run the backend locally with cloud DB to ensure connectivity and all APIs function properly.

        2. Deploy Backend to Cloud
            Use your chosen platform (Render, Heroku, AWS, DigitalOcean, etc.) to deploy backend.

            Make sure environment variables are set in the cloud provider’s dashboard exactly as in your .env.

            Once deployed, test the deployed backend APIs using tools like Postman or CURL to ensure all routes work as expected.

            Note down the deployed backend URL, e.g. https://rental-api.onrender.com/api.

        3. Configure Frontend for Backend Integration
            In your frontend project, update the .env (e.g., .env.local) file with the deployed backend API URL:

            VITE_API_BASE_URL=https://rental-api.onrender.com/api
            Adjust API call code (axios or fetch) to use this environment variable.
        
        4. Test Frontend Locally with Deployed Backend
            Run frontend locally (npm run dev or npm start).

            Test all features that communicate with backend: authentication, data fetch, form submissions, etc.

            Ensure that the frontend correctly communicates with the deployed backend — no CORS errors or broken routes.

        5. Deploy Frontend to Cloud
            Use deployment platforms like Netlify, Vercel, or Render for static sites.

            Set environment variables on the hosting platform as needed (e.g., VITE_API_BASE_URL).

            Deploy the frontend and verify the deployed frontend correctly interacts with the deployed backend.

        6. Final Testing and Validation
            Test all user flows on the fully deployed system (deployed frontend + deployed backend).

            Check for any issues like slow API responses, broken routes, authentication failures.

            Verify error handling and UI feedback.

        7. Monitor and Maintain
            Set up logs/monitoring on backend service.

            Monitor frontend errors with tools like Sentry.

            Periodically update dependencies, environment variables, and database backups.

    Summary Diagram
        Local Dev
            ↓
        Setup backend .env with cloud DB link
            ↓
        Test backend locally (cloud DB)
            ↓
        Deploy backend (Render, Heroku, etc.)
            ↓
        Test deployed backend APIs
            ↓
        Update frontend .env with deployed backend URL
            ↓
        Test frontend locally (connected to deployed backend)
            ↓
        Deploy frontend (Netlify, Vercel, etc.)
            ↓
        Test full deployed system

    
    Equipment Rental Management System - Backend:

        Tech Stack
            Node.js + Express.js
            MongoDB Atlas + Mongoose ODM
            JWT Authentication
            Redis (optional caching)
            Cron Jobs for scheduled tasks
            Nodemailer (optional email integration)

        Folder Structure
            ├── controllers/
            ├── middlewares/
            ├── models/
            ├── routes/
            ├── services/
            ├── utils/
            ├── config.js
            ├── index.js
            └── .env.example

        